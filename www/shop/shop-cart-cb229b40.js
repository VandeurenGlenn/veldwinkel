customElements.define("shop-cart-item",class ShopCartItem extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._onInput=this._onInput.bind(this)}set value(n){this._value=n,this.name=n.name,this.price=n.price,this.count=n.count||1,(async()=>{let t=await topstore.databases.get("images");t=await t.get(n.uid),this.image=`https://ipfs.io/ipfs/${t.thumbm}`,this.uid=n.uid,this.setAttribute("uid",this.uid),this._stamp()})()}get value(){return this._value}get _input(){return this.shadowRoot.querySelector("input")}_stamp(){this._input&&this._input.removeEventListener(this._onInput),this.shadowRoot.innerHTML=`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          height: 130px;\n          width: 100%;\n          padding: 8px 16px 16px 0;\n          box-sizing: border-box;\n          font-size: 18px;\n          --svg-icon-size: 18px;\n          font-size: 16px;\n        }\n        .flex {\n          flex: 1;\n        }\n        \n        .column {\n          display: flex;\n          flex-direction: column;\n          width: 66%;\n          height: 100%;\n        }\n        \n        .row {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          min-height: 26px;\n          height: 100%;\n        }\n        \n        input {\n          margin-right: -30px;\n          padding: 12px 0px 12px 6px;\n          box-sizing: border-box;\n          width: 42px;\n          outline: none;\n          border: none;\n          background: transparent;\n          pointer-events: auto;\n          color: var(--client-order-selector-item-color, '#888');\n          font-size: 18px;  \n        }\n        \n        img {\n          border-radius: 30px;\n        }\n        \n        p, strong {\n          text-transform: uppercase;\n        }\n        @media (max-width: 321px) {\n          img {\n            width: 82px;\n          }\n        }\n      </style>     \n      \n      <span class="row">\n        <img src="${this.image}"></img>        \n        \n        <span class="flex"></span>\n        <span class="column">      \n          <span class="row">\n            <strong>naam</strong>\n            <span class="flex"></span>\n            <p>${this.name}</p>     \n          </span>\n          <span class="flex"></span>\n          <span class="row">\n            <strong>prijs</strong>\n            <span class="flex"></span>\n            <custom-svg-icon icon="euro"></custom-svg-icon>\n            <p>${this.price}</p>\n          </span>\n          <span class="flex"></span>\n          <span class="row">\n            <strong>aantal</strong>\n            <span class="flex"></span>\n            <input type="number" value="${this.count}"></input>\n          </span>\n          \n          <span class="flex"></span>\n        </span>\n      </span>\n    `,this._input.addEventListener("input",this._onInput)}async _onInput(){const n=Number(this._input.value);if(console.log(n),0===n){await confirm("are you sure you want to remove this product?")&&window.shoppingCart.remove(this.uid)}else{const t=this.value;t.count=n,window.shoppingCart.change(t)}}});export default customElements.define("shop-cart",class ShopCart extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}get button(){return this.shadowRoot.querySelector("top-button")}connectedCallback(){this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          background: #fff;\n          z-index: 100;\n        }\n        .row {\n          display: flex;\n          align-items: center;\n        }\n        .toolbar {\n          width: 100%;\n        }\n        .flex {\n          flex: 1;\n        }\n        /* @media (min-width: 1440px) {\n          :host {\n            position: absolute;\n            transform: translateX(-50%);\n            left: 54.3%;\n          }\n        } */\n      </style>\n      \n      <custom-container>\n        <span class="row toolbar">\n          \x3c!-- <translated-string>products</translated-string> --\x3e\n          <span class="flex"></span>\n        </span>\n        <slot></slot>\n      </custom-container>\n      \n      <span class="row">\n        <span class="flex"></span>\n        <top-button>checkout</top-button>\n        <span class="flex"></span>\n      </span>\n      \x3c!-- <span class="flex"></span> --\x3e\n    ',this.button.addEventListener("click",this._submit)}_submit(){shoppingCart.submit()}add(n){const t=document.createElement("shop-cart-item");this.appendChild(t),t.value=n}change(n){this.querySelector(`[uid="${n.uid}"]`).item=n}remove(n){this.removeChild(this.querySelector(`[uid="${n}"]`))}});

customElements.define("shop-cart-item",class ShopCartItem extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._onInput=this._onInput.bind(this)}set value(n){this._value=n,this.name=n.name,this.price=n.price,this.count=n.count||1,(async()=>{this.uid=n.uid,this.setAttribute("uid",this.uid),this._stamp()})()}get value(){return this._value}get _input(){return this.shadowRoot.querySelector("input")}_stamp(){this._input&&this._input.removeEventListener(this._onInput),this.shadowRoot.innerHTML=`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          width: 100%;\n          box-sizing: border-box;\n          font-size: 18px;\n          --svg-icon-size: 18px;\n          font-size: 16px;\n        }\n        .flex {\n          flex: 1;\n        }\n        .flex2 {\n          flex: 2;\n        }\n        .column {\n          display: flex;\n          flex-direction: column;\n          width: 66%;\n          height: 100%;\n        }\n        \n        .row {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          min-height: 26px;\n          height: 100%;\n          width: 100%;\n        }\n        \n        input {\n          margin-right: -30px;\n          padding: 12px 0px 12px 6px;\n          box-sizing: border-box;\n          width: 42px;\n          outline: none;\n          border: none;\n          background: transparent;\n          pointer-events: auto;\n          color: var(--client-order-selector-item-color, '#888');\n          font-size: 18px;  \n        }\n        \n        img {\n          border-radius: 30px;\n        }\n        \n        p, strong {\n          text-transform: uppercase;\n        }\n        .price {\n          max-width: 88px;\n          width: 100%;\n          align-items: center;\n          justify-content: flex-end;\n        }\n        @media (max-width: 321px) {\n          img {\n            width: 82px;\n          }\n        }\n      </style>     \n      \n      <span class="row">\n        \x3c!-- <img src="${this.image}"></img> --\x3e\n        \n        \x3c!-- <span class="flex"></span> --\x3e\n        \x3c!-- <span class="column">       --\x3e\n        <p class="name">${this.name}</p>\n        <span class="flex"></span>\n        \n        <input type="number" value="${this.count}"></input>\n        \n      \n      \n        <span class="price row">\n          <custom-svg-icon icon="euro"></custom-svg-icon>\n          <p>${this.price}</p>\n        </span>\n          \n          \n        \n      </span>\n    `,this._input.addEventListener("input",this._onInput)}async _onInput(){const n=Number(this._input.value);if(console.log(n),0===n){await confirm("are you sure you want to remove this product?")&&window.shoppingCart.remove(this.uid)}else{const t=this.value;t.count=n,window.shoppingCart.change(t)}}}),customElements.define("history-prompt",class HistoryPrompt extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          background: #00000063;\n          z-index: 100;\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          opacity: 0;\n          pointer-events: none;\n        }\n        .row {\n          display: flex;\n          align-items: center;\n        }\n        .toolbar {\n          width: 100%;\n        }\n        .flex {\n          flex: 1;\n        }\n        /* @media (min-width: 1440px) {\n          :host {\n            position: absolute;\n            transform: translateX(-50%);\n            left: 54.3%;\n          }\n        } */\n        \n        :host([shown]) {\n          opacity: 1;\n          pointer-events: auto;\n        }\n        \n        custom-prompt {\n          width: 320px;\n          height: 320px;\n        }\n      </style>\n      \n      <custom-prompt>\n        <p>Het lijkt vrij leeg hier.</p>\n        <br>\n        <strong>winkelwagen herstellen naar vorige bestelling?</strong>\n        <span class="flex"></span>\n\n        <span class="row">\n        \n          <custom-svg-icon icon="close"></custom-svg-icon>\n          <span class="flex"></span>\n          <custom-svg-icon icon="done"></custom-svg-icon>\n        </span>\n      </custom-prompt>\n      \x3c!-- <span class="flex"></span> --\x3e\n    '}show(){return new Promise((n,t)=>{this.shadowRoot.querySelector('[icon="close"]').addEventListener("click",()=>{n(!1)}),this.shadowRoot.querySelector('[icon="done"]').addEventListener("click",()=>{n(!0)}),this.setAttribute("shown",""),this.shadowRoot.querySelector("custom-prompt").show()})}hide(){this.removeAttribute("shown")}});export default customElements.define("shop-cart",class ShopCart extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          background: #fff;\n          z-index: 100;\n        }\n        .row {\n          display: flex;\n          align-items: center;\n        }\n        .toolbar {\n          width: 100%;\n        }\n        .flex {\n          flex: 1;\n        }\n        \n        .price {\n          display: flex;\n          width: 88px;\n          justify-content: flex-end;\n        }\n        /* @media (min-width: 1440px) {\n          :host {\n            position: absolute;\n            transform: translateX(-50%);\n            left: 54.3%;\n          }\n        } */\n      </style>\n      <history-prompt></history-prompt>\n      <custom-container>\n        <span class="row toolbar">\n        <strong>product</strong>\n          \x3c!-- <translated-string>products</translated-string> --\x3e\n          <span class="flex"></span>\n          <strong>aantal</strong>\n          \n          <strong class="price">prijs</strong>\n        </span>\n        <slot></slot>\n      </custom-container>\n      \n      <span class="row">\n        <span class="flex"></span>\n        <top-button>checkout</top-button>\n        <span class="flex"></span>\n      </span>\n      \x3c!-- <span class="flex"></span> --\x3e\n    '}get button(){return this.shadowRoot.querySelector("top-button")}get historyPrompt(){return this.shadowRoot.querySelector("history-prompt")}set showHistory(n){(async()=>{let t;if(n){if(t=await this.historyPrompt.show()){let n=localStorage.getItem("cart");if(n=JSON.parse(n))for(let t of Object.keys(n))this.add(n[t])}this.historyPrompt.hide()}else this.historyPrompt.hide()})()}connectedCallback(){this.button.addEventListener("click",this._submit),0===Array.from(this.querySelectorAll("shop-cart-item")).length&&(this.showHistory=!0)}_submit(){shoppingCart.submit()}add(n){console.log({item:n});const t=document.createElement("shop-cart-item");this.appendChild(t),t.value=n;let e=localStorage.getItem("cart");(e=e?JSON.parse(e):{})[n.uid]=n,localStorage.setItem("cart",JSON.stringify(e)),this.showHistory=!1}change(n){this.querySelector(`[uid="${n.uid}"]`).item=n;let t=localStorage.getItem("cart");(t=t?JSON.parse(t):{})[n.uid]=n,localStorage.setItem("cart",JSON.stringify(t))}remove(n){this.removeChild(this.querySelector(`[uid="${n}"]`));let t=localStorage.getItem("cart");t&&delete(t=JSON.parse(t))[item.uid],localStorage.setItem("cart",JSON.stringify(t)),0===Array.from(this.querySelectorAll("shop-cart-item")).length&&(this.showHistory=!0)}});

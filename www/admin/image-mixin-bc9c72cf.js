import"./base-49bd4703.js";customElements.define("image-nails",class ImageNails extends HTMLElement{get input(){return this.shadowRoot.querySelector("input")}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=this.template,this._onTouchStart=this._onTouchStart.bind(this),this._onTouchMove=this._onTouchMove.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._ondragover=this._ondragover.bind(this),this._ondrop=this._ondrop.bind(this),this._addToPhotos=this._addToPhotos.bind(this),this.targetBCR=null,this.target=null,this.startY=0,this.currentY=0,this.screenY=0,this.targetY=0}connectedCallback(){super.connectedCallback&&super.connectedCallback(),this.addEventListener("touchstart",this._onTouchStart,{passive:!0}),this.addEventListener("touchend",this._onTouchEnd,{passive:!0}),this.addEventListener("mousedown",this._onTouchStart,{passive:!0}),this.addEventListener("mouseup",this._onTouchEnd,{passive:!0}),this.addEventListener("drop",this._ondrop),this.addEventListener("dragover",this._ondragover),this.shadowRoot.querySelector('[icon="add-to-photos"]').addEventListener("click",this._addToPhotos),this.input.onchange=(()=>{for(let t=0;t<this.input.files.length;++t)this._readFile(this.input.files[t])})}set currentY(t){this._currentY=t,requestAnimationFrame(()=>{if(!1!==this.dragging||!1!==this.lastDragging){if(this.boundingClientRect){const t=this.boundingClientRect.height;let e=this.screenY||0;this.dragging&&this.currentY?e=this.currentY-this.startY:e+=(this.y-e)/2;const s=Math.abs(e)/t,i=1-Math.pow(s,1.8);if(this.selected.style.transform=`translateY(${e}px)`,this.selected.style.opacity=i,this.screenY=e,this.dragging)return this.selected.classList.add("dragging");if(i<.5){this.selected.classList.add("swiped");const t=this.selected;this.dispatchEvent(new CustomEvent("image-swiped",{detail:t})),this.removeChild(this.selected),this.reset()}else this.reset()}this.lastDragging=this.dragging}})}get currentY(){return this._currentY}set dragging(t){this._dragging=t}set boundingClientRect(t){this._boundingClientRect=t}get dragging(){return this._dragging||!1}get boundingClientRect(){return this._boundingClientRect}get threshold(){return.35*this.boundingClientRect.height}_onTouchStart(t){this.selected=t.path[0],"img"===this.selected.localName&&(this.reset(),this.addEventListener("touchmove",this._onTouchMove,{passive:!0}),this.addEventListener("mousemove",this._onTouchMove,{passive:!0}),this.boundingClientRect=this.getBoundingClientRect(),this.startY=t.pageY||t.touches[0].pageY,this.currentY=this.startY,this.selected.style.willChange="transform",this.dragging=!0)}_onTouchMove(t){this.dragging&&(this.currentY=t.pageY||t.touches[0].pageY)}_onTouchEnd(t){if(!this.selected)return;const e=this.currentY-this.startY,s=this.boundingClientRect.height;this.y=0,Math.abs(e)>this.threshold&&(this.y=e>0?s:-s),this.currentY=0,this.lastDragging=this.dragging,this.dragging=!1,this.removeEventListener("touchmove",this._onTouchMove,{passive:!0}),this.removeEventListener("mousemove",this._onTouchMove,{passive:!0})}reset(){this.dragging=!1,this.selected.style.willChange="initial",this.selected.style.transform="none",this.selected.style.opacity=1,this.screenY=0,this.currentY=0,this.startY=0,this.y=0,this.selected.classList.remove("dragging")}add({key:t,src:e}){const s=document.createElement("img");s.src=e,s.setAttribute("key",t),this.appendChild(s)}_readFile(t){const e=new FileReader;e.onload=(()=>this.upload(e.result)),e.readAsDataURL(t)}_ondragover(t){t.preventDefault()}_ondrop(t){if(console.log("File(s) dropped"),t.preventDefault(),t.dataTransfer.items)for(var e=0;e<t.dataTransfer.items.length;e++)"file"===t.dataTransfer.items[e].kind&&this._readFile(t.dataTransfer.items[e].getAsFile());else for(e=0;e<t.dataTransfer.files.length;e++)this._readFile(t.dataTransfer.files[e])}_addToPhotos(){this.input.click()}upload(t){this.dispatchEvent(new CustomEvent("nail-upload",{detail:t}))}remove(){}clear(){Array.from(this.children).forEach(t=>this.removeChild(t))}get template(){return'\n<style>\n  :host {\n    display: flex;\n    flex-direction: row;\n    height: 176px;\n    width: 100%;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n                0 1px 5px 0 rgba(0, 0, 0, 0.12),\n                0 3px 1px -2px rgba(0, 0, 0, 0.2);\n                \n    border: 1px solid #38464e;\n    user-select: none;\n    padding: 24px;\n    box-sizing: border-box;\n    }\n  ::slotted(.swiped) {\n    display: none;\n  }\n  ::slotted(.dragging) {\n    user-select: none;\n    pointer-events: none;\n  }\n  ::slotted(img) {\n    height: 120px;\n    width: 120px;\n    pointer-events: auto;\n    cursor: pointer;\n    user-select: none;\n    position: initial !important;\n    image-rendering: -webkit-optimize-contrast;\n  }\n  input {\n    opacity: 0;\n    position: fixed;\n\n  }\n</style>\n<slot></slot>\n<custom-svg-icon icon="add-to-photos"></custom-svg-icon>\n<input type="file" accept="image/*"></input>\n    '}});const t=new class WebpEncoder{constructor(){this.size=960,this._init()}async _init(){await importScript("./third-party/webp/enc/webp_enc.js"),this.module=webp_enc()}get height(){return this.img.height/this.img.width*this.size}get width(){return this.img.width/this.img.width*this.size}async load(t){this.img=document.createElement("img"),this.img.src=t,await new Promise(t=>this.img.onload=t);const e=document.createElement("canvas");[e.width,e.height]=[this.width,this.height];const s=e.getContext("2d");return s.drawImage(this.img,0,0,this.width,this.height),s.getImageData(0,0,this.width,this.height)}async encode(t,e,s=85){this.size=e;const i=await this.load(t),n=this.module.encode(i.data,i.width,i.height,{quality:s,target_size:0,target_PSNR:0,method:4,sns_strength:50,filter_strength:60,filter_sharpness:0,filter_type:1,partitions:0,segments:4,pass:1,show_compressed:0,preprocessing:0,autofilter:0,partition_limit:0,alpha_compression:1,alpha_filtering:1,alpha_quality:100,lossless:0,exact:0,image_hint:0,emulate_jpeg_size:0,thread_level:0,low_memory:0,near_lossless:100,use_delta_palette:0,use_sharp_yuv:0});return console.log("size",n.length),this.module.free_result(),n}};var e=e=>(class ImageMixin extends e{constructor(){super()}connectedCallback(){super.connectedCallback&&super.connectedCallback()}encodeAndResize(e,s,i,n="webp"){if("webp"===n)return t.encode(e,s,i)}async addImage(t,e,s,i,n){s=await this.encodeAndResize(s,i,n);const a=(await ipfs.add(s)).cid.toString();0===e&&await firebase.database().ref(`images/${t}/timestamp`).set((new Date).getTime()),await firebase.database().ref(`images/${t}/${e}`).set(a)}});export{e as I};
